# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      IMAGE_TAG: ${{ github.sha }}
      REPOSITORY_NAME: terraform_canvas
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Get or create an OCIR Repository
        uses: oracle-actions/get-ocir-repository@v1.2.1
        id: get-ocir-repository
        with:
          name: $REPOSITORY_NAME
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.2.1
        id: login-ocir
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Tag and push a container image
        id: tag-and-push-image
        run: |
          docker build -t "$REPOSITORY_NAME:new-backend" .
          docker tag "$REPOSITORY_NAME:new-backend" "${{ steps.get-ocir-repository.outputs.repo_path }}:$IMAGE_TAG"
          docker push "${{ steps.get-ocir-repository.outputs.repo_path }}:$IMAGE_TAG"
      - name: update values.yaml
        run: |
          cat <<EOF> values.yaml
          ---
          # Default values for hello-world.
          # This is a YAML-formatted file.
          # Declare variables to be passed into your templates.

          replicaCount: 1

          image:
            repository: nginx@latest
            pullPolicy: IfNotPresent
            # Overrides the image tag whose default is the chart appVersion.
            tag: ""

          nameOverride: ""
          fullnameOverride: ""

          serviceAccount:
            # Specifies whether a service account should be created
            create: true
            # Annotations to add to the service account
            annotations: {}
            # The name of the service account to use.
            # If not set and create is true, a name is generated using the fullname template
            name: ""

          service:
            type: ClusterIP
            port: 80
          EOF

      - name: Pushes test file
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
        with:
          source_file: 'values.yaml'
          destination_repo: 'Terraform-Canvas/canvas-helm'
          destination_folder: 'charts/hello-world'
          user_email: 'kdg97811@naver.com'
          user_name: 'Eeap'
          commit_message: "build: add img ${{ steps.get-ocir-repository.outputs.repo_path }}:$IMAGE_TAG"